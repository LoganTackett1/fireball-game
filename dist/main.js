(()=>{"use strict";var e,t,n,o,r={424:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),c=n.n(a)()(r());c.push([e.id,"body {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\ncanvas {\n  border: black 5px solid;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:["body {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\ncanvas {\r\n  border: black 5px solid;\r\n}\r\n"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var p=0;p<e.length;p++){var u=[].concat(e[p]);o&&c[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},548:(e,t,n)=>{var o=n(379),r=n.n(o),a=n(795),c=n.n(a),s=n(569),i=n.n(s),p=n(565),u=n.n(p),y=n(216),l=n.n(y),d=n(589),f=n.n(d),h=n(424),v={};v.styleTagTransform=f(),v.setAttributes=u(),v.insert=i().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=l(),r()(h.Z,v),h.Z&&h.Z.locals&&h.Z.locals},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],s=0;s<e.length;s++){var i=e[s],p=o.base?i[0]+o.base:i[0],u=a[p]||0,y="".concat(p," ").concat(u);a[p]=u+1;var l=n(y),d={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==l)t[l].references++,t[l].updater(d);else{var f=r(d,o);o.byIndex=s,t.splice(s,0,{identifier:y,updater:f,references:1})}c.push(y)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var s=n(a[c]);t[s].references--}for(var i=o(e,r),p=0;p<a.length;p++){var u=n(a[p]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},417:(e,t,n)=>{n.d(t,{Z:()=>o});const o=function(){const e={},t=[];function n(e,t){"jump"===t&&e.physics.y<=100&&(e.physics.a_Vertical=-1440,e.physics.v_Vertical=360),"k"===t.charAt(0)&&("u"===t.charAt(1)?e.physics.v_Horizontal=0:"d"===t.charAt(1)&&("a"===t.charAt(2)?e.physics.v_Horizontal=-120:"d"===t.charAt(2)&&(e.physics.v_Horizontal=120)))}return{gameState:e,newPlayer:function(){const n=function(){let e="";for(let t=0;t<10;t+=1)e+=Math.floor(10*Math.random());return e}();return t.push(`player${n}`),e[`player${n}`]={events:[],physics:{x:400,y:100,a_Vertical:0,v_Vertical:0,v_Horizontal:0},id:n,color:`rgb(${Math.floor(255*Math.random())},${Math.floor(255*Math.random())},${Math.floor(255*Math.random())})`},n},players:t,newEvent:function(t,n){e[t].events.push(n)},next:function(t){Object.keys(e).forEach((t=>{const o=e[t],{events:r}=o;for(let e=r.length-1;e>=0;e-=1)n(o,r[e])})),Object.keys(e).forEach((n=>{const o=e[n];o.physics.x+=o.physics.v_Horizontal*t,o.physics.y+=o.physics.v_Vertical*t+o.physics.a_Vertical*t*t*.5,o.physics.v_Vertical+=o.physics.a_Vertical*t,o.physics.y<100&&(o.physics.y=100,o.physics.v_Vertical=0,o.physics.a_Vertical=0),o.physics.x<15&&(o.physics.x=15),o.physics.x>785&&(o.physics.x=785)}))}}}},138:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var o=n(417),r=n(28);n(548);const a=document.createElement("canvas");document.body.appendChild(a),a.width=800,a.height=400;const c="http://localhost:8000/",s=(0,o.Z)();function i(e){const{id:t}=s.me,n=[...s.me.events];fetch(e,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({id:t,events:n,type:"events"})})}function p(){let e=0;Object.keys(s.keyDown).forEach((t=>{s.keyDown[t]!==s.oldKeys[t]&&(e+=1),e>0&&i(c)}))}function u(){const e=[];!0!==s.keyDown.W&&!0!==s.keyDown.Space||e.push("jump"),!0===s.keyDown.A&&!1===s.keyDown.D&&e.push("kda"),!1===s.keyDown.A&&!0===s.keyDown.D&&e.push("kdd"),!1===s.keyDown.A&&!1===s.keyDown.D&&e.push("ku"),!0===s.keyDown.A&&!0===s.keyDown.D&&e.push("ku"),s.me.events=e,p(),s.oldKeys={...s.keyDown}}s.keyDown={W:!1,A:!1,D:!1,Space:!1},s.oldKeys={...s.keyDown},window.addEventListener("keydown",(e=>{"A"===e.key||"a"===e.key?s.keyDown.A=!0:"D"===e.key||"d"===e.key?s.keyDown.D=!0:"W"===e.key||"w"===e.key?s.keyDown.W=!0:" "===e.key&&(s.keyDown.Space=!0)})),window.addEventListener("keyup",(e=>{"A"===e.key||"a"===e.key?s.keyDown.A=!1:"D"===e.key||"d"===e.key?s.keyDown.D=!1:"W"===e.key||"w"===e.key?s.keyDown.W=!1:" "===e.key&&(s.keyDown.Space=!1)}));const y=a.getContext("2d");async function l(e){Object.keys(e).forEach((t=>{e[t].id!==s.me.id&&(t in s.gameState?s.gameState[t].events=e[t].events:s.gameState[t]=e[t])}))}async function d(e,t){fetch(t,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({ping:e,type:"sync",playerData:s.me})}).then((e=>e.json())).then((e=>l(e)))}async function f(){u(),s.next(.016),y.clearRect(0,0,a.width,a.height),(0,r.Z)(y,s.gameState,s.me),d(33,c)}await fetch(c,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({type:"first"})}).then((e=>e.json())).then((e=>{const t=e;var n;n=t.state,Object.keys(n).forEach((e=>{s.gameState[e]=n[e]})),s.me=s.gameState[`player${t.id}`]})),setInterval(f,16),t()}catch(h){t(h)}}),1)},28:(e,t,n)=>{function o(e,t,n,o){return[e,400-t,n,-o]}n.d(t,{Z:()=>r});const r=function(e,t){e.beginPath(),e.rect(...o(0,0,800,100)),e.fillStyle="Green",e.fill(),e.closePath(),Object.keys(t).forEach((n=>{const r=t[n].physics;e.beginPath(),e.rect(...o(Math.round(r.x-15),Math.round(r.y),30,30)),e.fillStyle=t[n].color,e.fill(),e.closePath()}))}}},a={};function c(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,exports:{}};return r[e](n,n.exports,c),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",o=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},c.a=(r,a,c)=>{var s;c&&((s=[]).d=-1);var i,p,u,y=new Set,l=r.exports,d=new Promise(((e,t)=>{u=t,p=e}));d[t]=l,d[e]=e=>(s&&e(s),y.forEach(e),d.catch((e=>{}))),r.exports=d,a((r=>{var a;i=(r=>r.map((r=>{if(null!==r&&"object"==typeof r){if(r[e])return r;if(r.then){var a=[];a.d=0,r.then((e=>{c[t]=e,o(a)}),(e=>{c[n]=e,o(a)}));var c={};return c[e]=e=>e(a),c}}var s={};return s[e]=e=>{},s[t]=r,s})))(r);var c=()=>i.map((e=>{if(e[n])throw e[n];return e[t]})),p=new Promise((t=>{(a=()=>t(c)).r=0;var n=e=>e!==s&&!y.has(e)&&(y.add(e),e&&!e.d&&(a.r++,e.push(a)));i.map((t=>t[e](n)))}));return a.r?p:c()}),(e=>(e?u(d[n]=e):p(l),o(s)))),s&&s.d<0&&(s.d=0)},c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),c.nc=void 0,c(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,